name: MLOps-CI-CD-Pipeline

on:
  workflow_dispatch:  

jobs:
  infra-provisioning:
    name: TF-Infrastructure-Deploy
    runs-on: self-hosted

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: git-checkout
        uses: actions/checkout@v3

      - name: tf-init
        run: terraform init

      - name: tf-apply
        run: terraform apply -auto-approve

      - name: extract-tf-outputs
        id: terraform-output
        run: |
          set +x # Disable echoing of commands

          echo "[INFO] Reading terraform outputs..."
          TF_OUTPUT=$(terraform output -json)
          # echo "$TF_OUTPUT" | jq . # Suppressed output

          # Corrected keys based on outputs.tf
          PUBLIC_IP=$(echo "$TF_OUTPUT" | jq -r '.ec2_public_ip.value')

          # Delete existing file and recreate
          rm -f /tmp/ec2_host.txt
          echo "$PUBLIC_IP" > /tmp/ec2_host.txt
          echo "[INFO] EC2 host file created: /tmp/ec2_host.txt"

          set -x # Re-enable echoing of commands

      - name: setup-ssh-key
        run: |
          set +x # Disable echoing of commands

          mkdir -p ~/.ssh
          KEY_FILE=~/.ssh/mlchatbot_app_key.pem

          # Delete existing key if it exists
          if [ -f "$KEY_FILE" ]; then
            echo "[INFO] Existing SSH key found. Deleting: $KEY_FILE"
            rm -f "$KEY_FILE"
          fi

          PRIVATE_KEY=$(terraform output -raw private_key_pem)
          echo "$PRIVATE_KEY" > "$KEY_FILE"
          chmod 600 "$KEY_FILE"

          set -x # Re-enable echoing of commands

  ML-Build-EC2-Deploy:
    name: ml-build-deploy
    runs-on: self-hosted
    needs: infra-provisioning

    env:
      EC2_USER: ec2-user
      
    defaults:
      run:
        working-directory: Chatbot

    steps:
    - name: workspace-cleanup
      run: |
        echo "Cleaning runner workspace..."
        rm -rf "$GITHUB_WORKSPACE"/*
        echo "Workspace cleaned"

    - name: git-checkout
      uses: actions/checkout@v3

    - name: ml-model-training
      run: |
        python -m venv build_env
        source build_env/bin/activate
        pip install -r requirements_build.txt --break-system-packages
        python3 src/run_pipelines.py

    - name: validate-model-artifact
      id: check_model_file
      run: |
        MODEL_PATH="models/saved_models/disease_classification_model.pkl"
        if [ -f "$MODEL_PATH" ]; then
          FILE_SIZE=$(stat -c%s "$MODEL_PATH")
          echo "file_exists=true" >> $GITHUB_OUTPUT
          echo "Model file exists at: $MODEL_PATH"
          echo "Model file size: $FILE_SIZE bytes"
        else
          echo "file_exists=false" >> $GITHUB_OUTPUT
          echo "Model file NOT found at: $MODEL_PATH"
          exit 1
        fi

    - name: confirm-build-status
      if: steps.check_model_file.outputs.file_exists == 'true'
      run: echo "Model file exists! Build is successful."

    - name: file-validation
      run: |
          FILES="web_app/app.py web_app/app_data/symptoms.json web_app/app_data/treatments.json web_app/app_data/condition_patterns.json web_app/app_data/symptom_batches.json web_app/templates/index.html models/saved_models/disease_classification_model.pkl requirements_deploy.txt web_app/config/gunicorn_config.py config/nginx.conf config/nginx_amazon_linux.sh run_chatbot.py setup_amazon_linux.sh"
          for f in $FILES; do [ ! -f "$f" ] && echo "[ERROR] Missing: $f" && exit 1; done
          echo "[INFO] All files validated"

    - name: package-application
      run: |
          mkdir -p dist/mlchatbot-app/models/saved_models
          cp -rf web_app config dist/mlchatbot-app/
          cp models/saved_models/disease_classification_model.pkl dist/mlchatbot-app/models/saved_models/
          cp requirements_deploy.txt setup_amazon_linux.sh run_chatbot.py dist/mlchatbot-app/
          cd dist && zip -r mlchatbot-app.zip mlchatbot-app

    - name: load-ec2-hostname
      id: read-hostname
      run: |
          EC2_HOST=$(cat /tmp/ec2_host.txt)
          echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
          echo "Read EC2_HOST from /tmp/ec2_host.txt: $EC2_HOST"

    - name: scp-app-transfer
      run: |
        scp -i ~/.ssh/mlchatbot_app_key.pem -o StrictHostKeyChecking=no dist/mlchatbot-app.zip "$EC2_USER@${{ env.EC2_HOST }}:~/"

    - name: ec2-app-setup
      run: |
          ssh -i ~/.ssh/mlchatbot_app_key.pem -o StrictHostKeyChecking=no \
            "$EC2_USER@${{ env.EC2_HOST }}" << 'EOF'
              rm -rf mlchatbot-app
              unzip -o mlchatbot-app.zip
              cd mlchatbot-app
              sudo chmod 755 setup_amazon_linux.sh
              sudo chmod 755 config/nginx_amazon_linux.sh
          EOF

    - name: service-deployment
      run: |
          ssh -i ~/.ssh/mlchatbot_app_key.pem -o StrictHostKeyChecking=no \
            "$EC2_USER@${{ env.EC2_HOST }}" << 'EOF'
              cd mlchatbot-app
              bash setup_amazon_linux.sh
              bash config/nginx_amazon_linux.sh
          EOF
