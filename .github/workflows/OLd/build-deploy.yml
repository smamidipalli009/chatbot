name: Infrastructure Provisioning and Chatbot Deployment

on:
  workflow_dispatch:

jobs:
  terraform:
    name: Provision Infrastructure with Terraform
    runs-on: self-hosted

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs and Save Hostname
        id: terraform-output
        run: |
          set +x # Disable echoing of commands

          echo "[INFO] Reading terraform outputs..."
          TF_OUTPUT=$(terraform output -json)
          # echo "$TF_OUTPUT" | jq . # Suppressed output

          # Corrected keys based on outputs.tf
          PUBLIC_IP=$(echo "$TF_OUTPUT" | jq -r '.ec2_public_ip.value')

          # Export public IP to file
          echo "$PUBLIC_IP" > /tmp/ec2_host.txt

          set -x # Re-enable echoing of commands

      - name: Save Private Key to SSH Directory
        run: |
          set +x # Disable echoing of commands

          mkdir -p ~/.ssh
          KEY_FILE=~/.ssh/mlchatbot_app_key.pem

          # Delete existing key if it exists
          if [ -f "$KEY_FILE" ]; then
            echo "[INFO] Existing SSH key found. Deleting: $KEY_FILE"
            rm -f "$KEY_FILE"
          fi

          PRIVATE_KEY=$(terraform output -raw private_key_pem)
          echo "$PRIVATE_KEY" > "$KEY_FILE"
          chmod 600 "$KEY_FILE"

          set -x # Re-enable echoing of commands


  app-deploy:
    name: Deploy App to EC2
    runs-on: self-hosted
    needs: terraform

    env:
      EC2_USER: ec2-user

    defaults:
      run:
        working-directory: medical_chatbot

    steps:
      - name: Clean Workspace
        run: |
          echo "Cleaning runner workspace..."
          rm -rf "$GITHUB_WORKSPACE"/*
          echo "Workspace cleaned"

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Python Dependencies
        run: |
          pip install -r requirements.txt --break-system-packages

      - name: Build ML Model
        run: |
          python3 main/run_pipeline.py

      - name: Validate App Files
        run: |
          REQUIRED_FILES=(
            app/app.py
            app/app_data/symptoms.json
            app/app_data/treatments.json
            app/app_data/condition_patterns.json
            app/app_data/symptom_batches.json
            app/templates/index.html
            models/disease_classification_model.pkl
            requirements.txt
            main/run_chatbot.py
            setup.sh
          )
          echo "[INFO] Validating required files..."
          for FILE in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$FILE" ]; then
              echo "[ERROR] Missing required file: $FILE"
              exit 1
            else
              echo "[OK] Found: $FILE"
            fi
          done

      - name: Zip App Contents
        run: |
          mkdir -p dist/mlchatbot-app
          cp -r app dist/mlchatbot-app/
          cp -r models dist/mlchatbot-app/
          cp requirements.txt dist/mlchatbot-app/
          cp setup.sh dist/mlchatbot-app/
          cp main/run_chatbot.py dist/mlchatbot-app/
          cd dist && zip -r mlchatbot-app.zip mlchatbot-app

      - name: Read Hostname from File
        id: read-hostname
        run: |
          EC2_HOST=$(cat /tmp/ec2_host.txt)
          echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
          echo "Read EC2_HOST from /tmp/ec2_host.txt: $EC2_HOST"

      - name: Upload App to EC2
        run: |
          scp -i ~/.ssh/mlchatbot_app_key.pem -o StrictHostKeyChecking=no \
            dist/mlchatbot-app.zip "$EC2_USER@${{ env.EC2_HOST }}:~/"

      - name: Deploy App on EC2
        run: |
          ssh -i ~/.ssh/mlchatbot_app_key.pem -o StrictHostKeyChecking=no \
            "$EC2_USER@${{ env.EC2_HOST }}" << 'EOF'
              rm -rf mlchatbot-app
              unzip -o mlchatbot-app.zip
              cd mlchatbot-app
              bash setup.sh
          EOF

      - name: Delete Temporary File
        run: rm -f /tmp/ec2_host.txt
